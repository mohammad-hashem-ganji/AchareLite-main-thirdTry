// <auto-generated />
using System;
using App.Infra.DB.SqlServer.EF.DB_Achare.Ef;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Infra.DB.SqlServer.EF.Migrations
{
    [DbContext(typeof(AchareDbContext))]
    [Migration("20240701182752_admin2")]
    partial class admin2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("App.Domain.Core.Adress.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("App.Domain.Core.Adress.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("App.Domain.Core.CategoryService.Entities.MainCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.HasKey("Id");

                    b.ToTable("MainCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "تمیزکاری"
                        },
                        new
                        {
                            Id = 2,
                            Title = "ساختمان"
                        },
                        new
                        {
                            Id = 3,
                            Title = "تعمیرات اشیا"
                        },
                        new
                        {
                            Id = 4,
                            Title = "اسباب کسی"
                        },
                        new
                        {
                            Id = 5,
                            Title = "خودورو"
                        },
                        new
                        {
                            Id = 6,
                            Title = "سلامت و زیبایی"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.CategoryService.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SubCategoryId = 1,
                            Title = "سرویس عادی نظافت"
                        },
                        new
                        {
                            Id = 2,
                            SubCategoryId = 1,
                            Title = "سرویس ویزه نظافت"
                        },
                        new
                        {
                            Id = 3,
                            SubCategoryId = 1,
                            Title = "سرویس لوکس نظافت"
                        },
                        new
                        {
                            Id = 4,
                            SubCategoryId = 1,
                            Title = "نظافت راه پله"
                        },
                        new
                        {
                            Id = 5,
                            SubCategoryId = 1,
                            Title = "سرویس نظافت فوری"
                        },
                        new
                        {
                            Id = 6,
                            SubCategoryId = 1,
                            Title = "پذیرایی"
                        },
                        new
                        {
                            Id = 7,
                            SubCategoryId = 2,
                            Title = "شست و شو در محل"
                        },
                        new
                        {
                            Id = 8,
                            SubCategoryId = 2,
                            Title = "قالیشویی"
                        },
                        new
                        {
                            Id = 9,
                            SubCategoryId = 2,
                            Title = "خشکشویی"
                        },
                        new
                        {
                            Id = 10,
                            SubCategoryId = 2,
                            Title = "پرده شویی"
                        },
                        new
                        {
                            Id = 11,
                            SubCategoryId = 3,
                            Title = "تعمیر و سرویس کولر آبی"
                        },
                        new
                        {
                            Id = 12,
                            SubCategoryId = 3,
                            Title = "تعمیر کولر گازی و داکت اسپیلت"
                        },
                        new
                        {
                            Id = 13,
                            SubCategoryId = 3,
                            Title = "تعمیر و سرویس پکیج"
                        },
                        new
                        {
                            Id = 14,
                            SubCategoryId = 3,
                            Title = "تعمیر و سرویس آبگرمکن"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.CategoryService.Entities.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MainCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MainCategoryId = 1,
                            Title = "نظافت و پذیرایی"
                        },
                        new
                        {
                            Id = 2,
                            MainCategoryId = 1,
                            Title = "شستشو"
                        },
                        new
                        {
                            Id = 3,
                            MainCategoryId = 2,
                            Title = "سرمایش و گرمایش"
                        },
                        new
                        {
                            Id = 4,
                            MainCategoryId = 2,
                            Title = "تعمیرات ساختمان"
                        },
                        new
                        {
                            Id = 5,
                            MainCategoryId = 2,
                            Title = "لوله کشی"
                        },
                        new
                        {
                            Id = 6,
                            MainCategoryId = 2,
                            Title = "طراحی و بازسازی ساختمان"
                        },
                        new
                        {
                            Id = 7,
                            MainCategoryId = 2,
                            Title = "برقکاری"
                        },
                        new
                        {
                            Id = 8,
                            MainCategoryId = 2,
                            Title = "چوب و کابینت"
                        },
                        new
                        {
                            Id = 9,
                            MainCategoryId = 2,
                            Title = "باغبانی و فضای سبز"
                        },
                        new
                        {
                            Id = 10,
                            MainCategoryId = 3,
                            Title = "نصب و تعمیر لوازم خانگی"
                        },
                        new
                        {
                            Id = 11,
                            MainCategoryId = 3,
                            Title = "خدمات کامپیوتری"
                        },
                        new
                        {
                            Id = 12,
                            MainCategoryId = 3,
                            Title = "تعمیرات موبایل"
                        },
                        new
                        {
                            Id = 13,
                            MainCategoryId = 4,
                            Title = "باربری و جابجایی"
                        },
                        new
                        {
                            Id = 14,
                            MainCategoryId = 5,
                            Title = "خدمات و تعمیرات خودرو"
                        },
                        new
                        {
                            Id = 15,
                            MainCategoryId = 5,
                            Title = "کارواش و دیتیلینگ"
                        },
                        new
                        {
                            Id = 16,
                            MainCategoryId = 6,
                            Title = "زیبایی بانوان"
                        },
                        new
                        {
                            Id = 17,
                            MainCategoryId = 6,
                            Title = "پزشکی و پرستاری"
                        },
                        new
                        {
                            Id = 18,
                            MainCategoryId = 6,
                            Title = "حیوانات خانگی"
                        },
                        new
                        {
                            Id = 19,
                            MainCategoryId = 6,
                            Title = "پیرایش و زیبایی آقایان"
                        },
                        new
                        {
                            Id = 20,
                            MainCategoryId = 6,
                            Title = "تندرستی و ورزش"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Member.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5ab1f1cb-6e01-40cf-b550-d242b8d10d5f",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEC3QdpU/NhfRkHNYttYKt52USfx9CJ9r2LV19MMObGBkCOUOFv6xpGo6MVf1tY7c9w==",
                            PhoneNumber = "09179197331",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b1b60ba7-4cda-4050-ae03-5939e770e46a",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d2a40870-3c6c-4dc1-a7ce-e3b86a8feb68",
                            Email = "mohammad@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MOHAMMAD@GMAIL.COM",
                            NormalizedUserName = "MOHAMMAD",
                            PasswordHash = "AQAAAAEAACcQAAAAEJvpFalFKOeavB7RMkIIyZW7SVVO998l9alZbnsM8MIUcSkLce7pscopBmhnS6BM6A==",
                            PhoneNumber = "09179197331",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "61f80f7e-574e-4592-ba07-adb2c8e1c4b0",
                            TwoFactorEnabled = false,
                            UserName = "mohammad"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a0deb8ed-bf60-41df-a31c-9c135ffe2daa",
                            Email = "expert@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EXPERT@GMAIL.COM",
                            NormalizedUserName = "EXPERT",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ4mNtyd5mYnq2gO1ospd9qsBncuRRgzn8q6eZZyWcirkOmOAS+aend5+sfNVTKhHA==",
                            PhoneNumber = "09179197331",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8227e9e7-f0c4-4d9f-ad78-dcbbd7d4dfb6",
                            TwoFactorEnabled = false,
                            UserName = "expert"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a1f6e26-49e7-42d3-98a1-00290ee6a165",
                            Email = "negin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NEGIN@GMAIL.COM",
                            NormalizedUserName = "NEGIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEDPsdA7bOnGsBQO8M+QqHVXeFoP0LiT8dgArqQYg+3+OqQM40A+O066x/k2BQXh4Dg==",
                            PhoneNumber = "09179197331",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5d131f52-9744-472d-88e2-287e20618d7e",
                            TwoFactorEnabled = false,
                            UserName = "negin"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ac0f82d9-7554-4ae0-9c15-b03c6909f3c6",
                            Email = "ahmad@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMAD@GMAIL.COM",
                            NormalizedUserName = "AHMAD",
                            PasswordHash = "AQAAAAEAACcQAAAAEOiv46Zrk6MFM3vgTvXgKjnX+QYIN+RNM+rkE2FJwQcDixbmeHZIw+33JwGpkSLVfQ==",
                            PhoneNumber = "09179197331",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "af725ecf-7a1a-4be5-ba10-89c1f316e96e",
                            TwoFactorEnabled = false,
                            UserName = "ahmad"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Member.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("App.Domain.Core.OrderAgg.Entities.Bid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<string>("ExprtSujestFee")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("OrderId");

                    b.ToTable("Bids");
                });

            modelBuilder.Entity("App.Domain.Core.OrderAgg.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAccept")
                        .HasColumnType("bit");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ExpertId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("App.Domain.Core.OrderAgg.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("ServiseId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ExpertService", b =>
                {
                    b.Property<int>("ExpertsId")
                        .HasColumnType("int");

                    b.Property<int>("ServicesId")
                        .HasColumnType("int");

                    b.HasKey("ExpertsId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("ExpertService");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "21ac65a3-af9b-46f3-a6f4-885046997eeb",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "0bae8393-7e99-4a17-ac80-6b45b5d9445a",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "28525c14-133e-4e88-b5e3-8eb42118389a",
                            Name = "expert",
                            NormalizedName = "EXPERT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.Member.Entities.Admin", b =>
                {
                    b.HasBaseType("App.Domain.Core.Member.Entities.User");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("App.Domain.Core.Member.Entities.Customer", b =>
                {
                    b.HasBaseType("App.Domain.Core.Member.Entities.User");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("App.Domain.Core.Member.Entities.Expert", b =>
                {
                    b.HasBaseType("App.Domain.Core.Member.Entities.User");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Expert");
                });

            modelBuilder.Entity("App.Domain.Core.Adress.Entities.Address", b =>
                {
                    b.HasOne("App.Domain.Core.Adress.Entities.City", "City")
                        .WithOne("Address")
                        .HasForeignKey("App.Domain.Core.Adress.Entities.Address", "CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Member.Entities.User", "User")
                        .WithOne("Address")
                        .HasForeignKey("App.Domain.Core.Adress.Entities.Address", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.Core.CategoryService.Entities.Service", b =>
                {
                    b.HasOne("App.Domain.Core.CategoryService.Entities.SubCategory", "SubCategory")
                        .WithMany("Services")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("App.Domain.Core.CategoryService.Entities.SubCategory", b =>
                {
                    b.HasOne("App.Domain.Core.CategoryService.Entities.MainCategory", "MainCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("MainCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("App.Domain.Core.OrderAgg.Entities.Bid", b =>
                {
                    b.HasOne("App.Domain.Core.Member.Entities.Expert", "Expert")
                        .WithMany()
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.OrderAgg.Entities.Order", "Order")
                        .WithMany("Bids")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Expert");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("App.Domain.Core.OrderAgg.Entities.Comment", b =>
                {
                    b.HasOne("App.Domain.Core.Member.Entities.Customer", "Customer")
                        .WithMany("Comments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Member.Entities.Expert", "Expert")
                        .WithMany("Comments")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Expert");
                });

            modelBuilder.Entity("App.Domain.Core.OrderAgg.Entities.Order", b =>
                {
                    b.HasOne("App.Domain.Core.Member.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.CategoryService.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ExpertService", b =>
                {
                    b.HasOne("App.Domain.Core.Member.Entities.Expert", null)
                        .WithMany()
                        .HasForeignKey("ExpertsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.CategoryService.Entities.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("App.Domain.Core.Member.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("App.Domain.Core.Member.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Member.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("App.Domain.Core.Member.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.Core.Member.Entities.Admin", b =>
                {
                    b.HasOne("App.Domain.Core.Member.Entities.ApplicationUser", "ApplicationUser")
                        .WithOne("Admin")
                        .HasForeignKey("App.Domain.Core.Member.Entities.Admin", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("App.Domain.Core.Member.Entities.Customer", b =>
                {
                    b.HasOne("App.Domain.Core.Member.Entities.ApplicationUser", "ApplicationUser")
                        .WithOne("Customer")
                        .HasForeignKey("App.Domain.Core.Member.Entities.Customer", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("App.Domain.Core.Member.Entities.Expert", b =>
                {
                    b.HasOne("App.Domain.Core.Member.Entities.ApplicationUser", "ApplicationUser")
                        .WithOne("Expert")
                        .HasForeignKey("App.Domain.Core.Member.Entities.Expert", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("App.Domain.Core.Adress.Entities.City", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.Core.CategoryService.Entities.MainCategory", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("App.Domain.Core.CategoryService.Entities.SubCategory", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("App.Domain.Core.Member.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Customer");

                    b.Navigation("Expert");
                });

            modelBuilder.Entity("App.Domain.Core.Member.Entities.User", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.Core.OrderAgg.Entities.Order", b =>
                {
                    b.Navigation("Bids");
                });

            modelBuilder.Entity("App.Domain.Core.Member.Entities.Customer", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("App.Domain.Core.Member.Entities.Expert", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
